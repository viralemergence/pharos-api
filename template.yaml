AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  pharos-api

  Sample SAM Template for pharos-api

Parameters:
  CorsAllow:
    Type: String
    Default: "http://localhost:8000"
  UsersTableName:
    Type: String
    Default: "users"
  DatasetsTableName:
    Type: String
    Default: "datasets"
  DatasetsS3Bucket:
    Type: String
    Default: "data"
  NVersions:
    Type: String
    Default: "50"
  ProjectsTableName:
    Type: "String"
    Default: "projects"
  LayerName:
    Type: "String"
    Default: "layer"

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: Active
    Runtime: python3.9
    Architectures:
      - x86_64
    Handler: app.lambda_handler
  Api:
    Cors: !Join ["", ["'", !Ref CorsAllow, "'"]]
    TracingEnabled: True

Resources:
  Libraries:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/libraries/
      CompatibleRuntimes:
        - python3.9
      RetentionPolicy: Delete
      Description: Provides the base backend shared library and dependencies
      LayerName: !Join ["-", [!Ref AWS::StackName, !Ref LayerName]]

  UsersTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: "researcherID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "researcherID"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]

  DatasetsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: "researcherID"
          AttributeType: "S"
        - AttributeName: "datasetID"
          AttributeType: "S"
      KeySchema: # DynamoDB does not index data if primary key is not partition+sort hence unable to query
        - AttributeName: "researcherID"
          KeyType: "HASH" # Partition key
        - AttributeName: "datasetID"
          KeyType: "RANGE" # Sort Key
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Join ["-", [!Ref AWS::StackName, !Ref DatasetsTableName]]

  ProjectsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: "projectID"
          AttributeType: "S"
      KeySchema: # DynamoDB does not index data if primary key is not partition+sort hence unable to query
        - AttributeName: "projectID"
          KeyType: "HASH" # Partition key
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      TableName: !Join ["-", [!Ref AWS::StackName, !Ref ProjectsTableName]]

  DatasetsS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  AuthFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn: UsersTable
    Properties:
      CodeUri: src/lambda/auth/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /auth
            Method: post
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          USERS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]

  CreateUserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn: UsersTable
    Properties:
      CodeUri: src/lambda/create_user/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /create-user
            Method: post
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          USERS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]

  SaveDatasetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - UsersTable
      - DatasetsTable
    Properties:
      CodeUri: src/lambda/save_dataset/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /save-dataset
            Method: post
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          USERS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
          DATASETS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsTableName]]

  ListDatasetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - UsersTable
      - DatasetsTable
    Properties:
      CodeUri: src/lambda/list_datasets/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /list-datasets
            Method: post # Should be get but fails, maybe something with permissions
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          USERS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
          DATASETS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsTableName]]

  SaveRegisterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - UsersTable
      - DatasetsTable
      - DatasetsS3
    Properties:
      CodeUri: src/lambda/save_register/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /save-register
            Method: post
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          N_VERSIONS: !Ref NVersions
          USERS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
          DATASETS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsTableName]]
          DATASETS_S3_BUCKET:
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsTableName]]
        - S3CrudPolicy:
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]

  LoadRegisterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - UsersTable
      - DatasetsTable
      - DatasetsS3
    Properties:
      CodeUri: src/lambda/load_register/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /load-register
            Method: post
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          USERS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
          DATASETS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsTableName]]
          DATASETS_S3_BUCKET:
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsTableName]]
        - S3CrudPolicy:
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]

  SaveProjectFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - UsersTable
      - ProjectsTable
    Properties:
      CodeUri: src/lambda/save_project/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /save-project
            Method: post
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          USERS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
          PROJECTS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref ProjectsTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref ProjectsTableName]]

  ListProjectsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - UsersTable
      - ProjectsTable
    Properties:
      CodeUri: src/lambda/list_projects/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /list-projects
            Method: post
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          USERS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
          PROJECTS_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref ProjectsTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref ProjectsTableName]]

  # DatasetsS3Policy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties:
  #     Bucket: !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
  #     PolicyDocument:
  #       Version: 2012-10-17
  #       Statement:
  #         - Sid: S3AccessPermissions
  #           Action:
  #             - s3:GetObject
  #             - s3:PutObject
  #           Effect: Allow
  #           Resource: !Join
  #             - ""
  #             - - "arn:aws:s3:::"
  #               - !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
  #               - /*
  #           Principal:
  #             AWS:
  #               - !GetAtt ReadVersionFunctionRole.Arn
  #               # - !GetAtt UploadVersionFunctionRole.Arn

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  PharosApi:
    Description: "API Endpoint:"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  UsersTableName:
    Description: "Users Table Name"
    Value: !Join ["-", [!Ref AWS::StackName, !Ref UsersTableName]]
  # AuthFunctionIamRole:
  #   Description: "Implicit IAM Role created for Fake Auth function"
  #   Value: !GetAtt AuthFunction.Arn
