AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  pharos-api

  SAM Template for pharos-api stack-specific resources.

  This template can be deployed multiple times in the
  same AWS account, to create separate environments.

  sam sync should be used to create developer-specific stacks.

Parameters:
  CorsAllow:
    Type: String
    Default: "http://localhost:8000"
  MetadataTableName:
    Type: String
    Default: metadata
  LayerName:
    Type: String
    Default: layer
  DatasetsS3Bucket:
    Type: String
    Default: datasets-bucket
  NVersions:
    Type: String
    Default: 5
  UserPoolName:
    Type: String
    Default: userpool

  DataDownloadBucketName:
    Type: String
    Default: exports


# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    Tracing: Active
    Runtime: python3.10
    Architectures:
      - x86_64
    Handler: app.lambda_handler

Resources:
  Libraries:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: src/libraries/
      CompatibleRuntimes:
        - python3.10
      RetentionPolicy: Delete
      Description: Provides the base backend shared library and dependencies
      LayerName: !Join ["-", [!Ref AWS::StackName, !Ref LayerName]]

  MetadataTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      AttributeDefinitions:
        - AttributeName: "pk"
          AttributeType: "S"
        - AttributeName: "sk"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "pk"
          KeyType: "HASH" # Partition key
        - AttributeName: "sk"
          KeyType: "RANGE" # Sort Key
      BillingMode: "PAY_PER_REQUEST"
      TableName: !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]

  DatasetsS3:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Status: Enabled
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 2
              NoncurrentDays: 5

  DataDownloadBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName:
        !Join ["-", [!Ref AWS::StackName, !Ref DataDownloadBucketName]]
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false

  DataDownloadBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DataDownloadBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource:
              - !Sub arn:aws:s3:::${DataDownloadBucket}/*

  RDSPutPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !ImportValue pharos-database-RDSInstanceRole
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - S3:PutObject
            Resource:
              - !Sub arn:aws:s3:::${DataDownloadBucket}/*

  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Join ["-", [!Ref AWS::StackName, !Ref UserPoolName]]
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      MfaConfiguration: "OFF"
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      RefreshTokenValidity: 3600
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Join ["-", [!Ref AWS::StackName, !Ref UserPoolName]]
      UserPoolId: !Ref UserPool

  JSONApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Name: !Join ["-", [!Ref AWS::StackName, 'json']]
      EndpointConfiguration:
        Type: REGIONAL

      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'Accept, Accept-CH, Accept-Charset, Accept-Datetime, Accept-Encoding, Accept-Ext, Accept-Features, Accept-Language, Accept-Params, Accept-Ranges, Access-Control-Allow-Credentials, Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Origin, Access-Control-Expose-Headers, Access-Control-Max-Age, Access-Control-Request-Headers, Access-Control-Request-Method, Age, Allow, Alternates, Authentication-Info, Authorization, C-Ext, C-Man, C-Opt, C-PEP, C-PEP-Info, CONNECT, Cache-Control, Compliance, Connection, Content-Base, Content-Disposition, Content-Encoding, Content-ID, Content-Language, Content-Length, Content-Location, Content-MD5, Content-Range, Content-Script-Type, Content-Security-Policy, Content-Style-Type, Content-Transfer-Encoding, Content-Type, Content-Version, Cookie, Cost, DAV, DELETE, DNT, DPR, Date, Default-Style, Delta-Base, Depth, Derived-From, Destination, Differential-ID, Digest, ETag, Expect, Expires, Ext, From, GET, GetProfile, HEAD, HTTP-date, Host, IM, If, If-Match, If-Modified-Since, If-None-Match, If-Range, If-Unmodified-Since, Keep-Alive, Label, Last-Event-ID, Last-Modified, Link, Location, Lock-Token, MIME-Version, Man, Max-Forwards, Media-Range, Message-ID, Meter, Negotiate, Non-Compliance, OPTION, OPTIONS, OWS, Opt, Optional, Ordering-Type, Origin, Overwrite, P3P, PEP, PICS-Label, POST, PUT, Pep-Info, Permanent, Position, Pragma, ProfileObject, Protocol, Protocol-Query, Protocol-Request, Proxy-Authenticate, Proxy-Authentication-Info, Proxy-Authorization, Proxy-Features, Proxy-Instruction, Public, RWS, Range, Referer, Refresh, Resolution-Hint, Resolver-Location, Retry-After, Safe, Sec-Websocket-Extensions, Sec-Websocket-Key, Sec-Websocket-Origin, Sec-Websocket-Protocol, Sec-Websocket-Version, Security-Scheme, Server, Set-Cookie, Set-Cookie2, SetProfile, SoapAction, Status, Status-URI, Strict-Transport-Security, SubOK, Subst, Surrogate-Capability, Surrogate-Control, TCN, TE, TRACE, Timeout, Title, Trailer, Transfer-Encoding, UA-Color, UA-Media, UA-Pixels, UA-Resolution, UA-Windowpixels, URI, Upgrade, User-Agent, Variant-Vary, Vary, Version, Via, Viewport-Width, WWW-Authenticate, Want-Digest, Warning, Width, X-Content-Duration, X-Content-Security-Policy, X-Content-Type-Options, X-CustomHeader, X-DNSPrefetch-Control, X-Forwarded-For, X-Forwarded-Port, X-Forwarded-Proto, X-Frame-Options, X-Modified, X-OTHER, X-PING, X-PINGOTHER, X-Powered-By, X-Requested-With'"
        AllowOrigin: !Join ["", ["'", !Ref CorsAllow, "'"]]
        MaxAge: "'600'"
        AllowCredentials: false

      Auth:
        Authorizers:
          ApiCognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn

  MappingApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Name: !Join ["-", [!Ref AWS::StackName, 'mapping']]
      EndpointConfiguration:
        Type: REGIONAL

      BinaryMediaTypes:
        - '*~1*'

      Cors:
        AllowMethods: "'POST, GET'"
        AllowHeaders: "'Accept, Accept-CH, Accept-Charset, Accept-Datetime, Accept-Encoding, Accept-Ext, Accept-Features, Accept-Language, Accept-Params, Accept-Ranges, Access-Control-Allow-Credentials, Access-Control-Allow-Headers, Access-Control-Allow-Methods, Access-Control-Allow-Origin, Access-Control-Expose-Headers, Access-Control-Max-Age, Access-Control-Request-Headers, Access-Control-Request-Method, Age, Allow, Alternates, Authentication-Info, Authorization, C-Ext, C-Man, C-Opt, C-PEP, C-PEP-Info, CONNECT, Cache-Control, Compliance, Connection, Content-Base, Content-Disposition, Content-Encoding, Content-ID, Content-Language, Content-Length, Content-Location, Content-MD5, Content-Range, Content-Script-Type, Content-Security-Policy, Content-Style-Type, Content-Transfer-Encoding, Content-Type, Content-Version, Cookie, Cost, DAV, DELETE, DNT, DPR, Date, Default-Style, Delta-Base, Depth, Derived-From, Destination, Differential-ID, Digest, ETag, Expect, Expires, Ext, From, GET, GetProfile, HEAD, HTTP-date, Host, IM, If, If-Match, If-Modified-Since, If-None-Match, If-Range, If-Unmodified-Since, Keep-Alive, Label, Last-Event-ID, Last-Modified, Link, Location, Lock-Token, MIME-Version, Man, Max-Forwards, Media-Range, Message-ID, Meter, Negotiate, Non-Compliance, OPTION, OPTIONS, OWS, Opt, Optional, Ordering-Type, Origin, Overwrite, P3P, PEP, PICS-Label, POST, PUT, Pep-Info, Permanent, Position, Pragma, ProfileObject, Protocol, Protocol-Query, Protocol-Request, Proxy-Authenticate, Proxy-Authentication-Info, Proxy-Authorization, Proxy-Features, Proxy-Instruction, Public, RWS, Range, Referer, Refresh, Resolution-Hint, Resolver-Location, Retry-After, Safe, Sec-Websocket-Extensions, Sec-Websocket-Key, Sec-Websocket-Origin, Sec-Websocket-Protocol, Sec-Websocket-Version, Security-Scheme, Server, Set-Cookie, Set-Cookie2, SetProfile, SoapAction, Status, Status-URI, Strict-Transport-Security, SubOK, Subst, Surrogate-Capability, Surrogate-Control, TCN, TE, TRACE, Timeout, Title, Trailer, Transfer-Encoding, UA-Color, UA-Media, UA-Pixels, UA-Resolution, UA-Windowpixels, URI, Upgrade, User-Agent, Variant-Vary, Vary, Version, Via, Viewport-Width, WWW-Authenticate, Want-Digest, Warning, Width, X-Content-Duration, X-Content-Security-Policy, X-Content-Type-Options, X-CustomHeader, X-DNSPrefetch-Control, X-Forwarded-For, X-Forwarded-Port, X-Forwarded-Proto, X-Frame-Options, X-Modified, X-OTHER, X-PING, X-PINGOTHER, X-Powered-By, X-Requested-With'"
        AllowOrigin: !Join ["", ["'", !Ref CorsAllow, "'"]]
        MaxAge: "'600'"
        AllowCredentials: false

  # Stack-specific policy; This policy is also
  # used to look up which CF distribution to
  # invalidate as part of publishing, to avoid
  # the circular dependency where the CF needs
  # to know about the API domain, the API needs
  # to know the functions, and the functions
  # need to know the CF distribution ID.
  ApiCloudFrontCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        Name: !Join ["-", [!Ref AWS::StackName, "ApiCloudFrontCachePolicy"]]
        DefaultTTL: 2630000
        MaxTTL: 2630000
        MinTTL: 3600
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: none
          EnableAcceptEncodingBrotli: false
          EnableAcceptEncodingGzip: false
          HeadersConfig:
            HeaderBehavior: none
          QueryStringsConfig:
            QueryStringBehavior: all


  ApiCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
        - Id: JSONApiGatewayApi
          DomainName: !Sub "${JSONApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com"
          CustomOriginConfig:
            HTTPSPort: 443
            OriginProtocolPolicy: https-only
            OriginSSLProtocols: 
              - "TLSv1.2"
        - DomainName: !Sub "${MappingApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com"
          Id: MappingApiGatewayApi
          CustomOriginConfig:
            HTTPPort: '80'
            HTTPSPort: '443'
            OriginProtocolPolicy: https-only
            OriginSSLProtocols: 
              - "TLSv1.2"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_All
        CacheBehaviors:
          - PathPattern: "prod/map/*"
            TargetOriginId: MappingApiGatewayApi
            ViewerProtocolPolicy: redirect-to-https
            AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            CachedMethods:
            - GET
            - HEAD
            CachePolicyId: !Ref ApiCloudFrontCachePolicy

        DefaultCacheBehavior:
          AllowedMethods:
          - DELETE
          - GET
          - HEAD
          - OPTIONS
          - PATCH
          - POST
          - PUT
          CachedMethods:
          - HEAD
          - GET
          TargetOriginId: JSONApiGatewayApi
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: !Ref ApiCloudFrontCachePolicy


  GetUserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn: MetadataTable
    Properties:
      CodeUri: src/lambda/auth/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /auth
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]

  CreateUserFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/create_user/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /create-user
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]

  SaveDatasetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/save_dataset/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /save-dataset
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  DeleteDatasetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/delete_dataset/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /delete-dataset
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          DATASETS_S3_BUCKET: # S3 implementation
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - S3CrudPolicy: # S3 implementation
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  ListDatasetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/list_datasets/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /list-datasets
            Method: post # Should be get but fails, maybe something with permissions
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]

  SaveRegisterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/save_register/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /save-register
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          N_VERSIONS: !Ref NVersions # S3 implmentation
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          DATASETS_S3_BUCKET: # S3 implementation
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - S3CrudPolicy: # S3 implementation
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]

  LoadRegisterFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/load_register/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /load-register
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          DATASETS_S3_BUCKET: # S3 implementation
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - S3CrudPolicy: # S3 implementation
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]

  SaveProjectFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/save_project/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /save-project
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  CreateProjectFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/create_project/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /create-project
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  ListProjectsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/list_projects/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /list-projects
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]

  ReleaseDatasetFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn:
      - MetadataTable
      - DatasetsS3
    Properties:
      CodeUri: src/lambda/release_dataset/
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /release-dataset
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          DATASETS_S3_BUCKET: # S3 implementation
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - S3CrudPolicy: # S3 implementation
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]

  PublishRegistersFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Timeout: 900
      MemorySize: 1769
      CodeUri: src/lambda/publish_registers/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
          # - subnet-8f7652ea
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
          # CF_DISTRIBUTION: !Ref ApiCloudFrontDistribution
          CF_CACHE_POLICY_ID: !Ref ApiCloudFrontCachePolicy
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          DATASETS_S3_BUCKET: # S3 implementation
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - cloudfront:List*
                - cloudfront:Get*
                - cloudfront:CreateInvalidation
              Resource:
                - "*"
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - S3CrudPolicy: # S3 implementation
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  PublishProjectFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Timeout: 300
      MemorySize: 256
      CodeUri: src/lambda/publish_project/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
          # - subnet-8f7652ea
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /publish-project
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          DATASETS_S3_BUCKET: # S3 implementation
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
          PUBLISH_REGISTERS_LAMBDA: !GetAtt PublishRegistersFunction.Arn
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - S3CrudPolicy: # S3 implementation
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"
        - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt PublishRegistersFunction.Arn

  UnpublishProjectFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Timeout: 30
      CodeUri: src/lambda/unpublish_project/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
          # - subnet-8f7652ea
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /unpublish-project
            Method: post
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          # CF_DISTRIBUTION: !Ref ApiCloudFrontDistribution
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
          CF_CACHE_POLICY_ID: !Ref ApiCloudFrontCachePolicy
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          DATASETS_S3_BUCKET: # S3 implementation
            !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - cloudfront:List*
                - cloudfront:Get*
                - cloudfront:CreateInvalidation
              Resource:
                - "*"
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - S3CrudPolicy: # S3 implementation
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  GetPublishedProjectFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: src/lambda/get_published_project/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
          # - subnet-8f7652ea
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /published-project
            Method: get
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  GetPublishedRecordsFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 256
      Timeout: 10
      CodeUri: src/lambda/get_published_records/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
          # - subnet-8f7652ea
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /published-records
            Method: get
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  GetPublishedRecordsMetadataFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: src/lambda/get_published_records_metadata/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
          # - subnet-8f7652ea
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /metadata-for-published-records
            Method: get
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  GetMapTilesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Timeout: 30
      MemorySize: 512
      CodeUri: src/lambda/get_map_tiles/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
          # - subnet-8f7652ea
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: MappingApiGatewayApi
              # Ref: JSONApiGatewayApi
            Path: /map/{tilePath+}
            Method: get
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  GetResearchersFunction:
    Type: AWS::Serverless::Function
    Properties:
      MemorySize: 128
      CodeUri: src/lambda/get_researchers/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
          # - subnet-8f7652ea
      Events:
        Auth:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /researchers
            Method: get
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"

  DownloadDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/lambda/download_data/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
      Events:
        Auth:
          Type: Api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /download
            Method: POST
            Auth:
              Authorizer: ApiCognitoAuthorizer
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          CREATE_CSV_EXPORT_LAMBDA: !GetAtt CreateCSVExportFunction.Arn
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - S3CrudPolicy: # S3 implementation
            BucketName:
              !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"
        - Statement:
            - Effect: Allow
              Action:
                - lambda:InvokeFunction
              Resource:
                - !GetAtt CreateCSVExportFunction.Arn

  CreateCSVExportFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Timeout: 900
      CodeUri: src/lambda/create_export/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
          # - subnet-8f7652ea
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          REGION: !Ref AWS::Region
          CORS_ALLOW: !Ref CorsAllow
          DATA_DOWNLOAD_BUCKET_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref DataDownloadBucketName]]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
              Resource:
                # TODO: Fix this wildcard and replace with the ???? wildcard system
                - "*"
        - Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
              Resource:
                - "*"

  DownloadMetadataFunction:
    Type: AWS::Serverless::Function
    DependsOn:
      - MetadataTable
    Properties:
      CodeUri: src/lambda/get_download_metadata/
      Events:
        Auth:
          Type: Api
          Properties:
            RestApiId:
              Ref: JSONApiGatewayApi
            Path: /download-metadata
            Method: GET
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          CORS_ALLOW: !Ref CorsAllow
          METADATA_TABLE_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
          DATA_DOWNLOAD_BUCKET_NAME:
            !Join ["-", [!Ref AWS::StackName, !Ref DataDownloadBucketName]]
      Policies:
        - DynamoDBCrudPolicy:
            TableName:
              !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]

  # DownloadDataFunction:
  #   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  #   Properties:
  #     CodeUri: src/lambda/download_data/
  #     VpcConfig:
  #       SecurityGroupIds:
  #         - !ImportValue pharos-database-VPCSG
  #       SubnetIds:
  #         - !ImportValue pharos-database-DatabaseSubnetA
  #         - !ImportValue pharos-database-DatabaseSubnetB
  #         # - subnet-8f7652ea
  #     Events:
  #       Auth:
  #         Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
  #         Properties:
  #           Path: /download-data
  #           Method: post
  #     Layers:
  #       - !Ref Libraries
  #     Environment:
  #       Variables:
  #         CORS_ALLOW: !Ref CorsAllow
  #         HOST: !ImportValue pharos-database-RDSProxyEndpoint
  #         PORT: "5432"
  #         DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
  #         USERNAME: !Join ["-", [!Ref AWS::StackName, user]]
  #         PASSWORD: testingrds
  #         REGION: !Ref AWS::Region
  #         BUCKET: !Join ["-", [!Ref AWS::StackName, !Ref DataDownloadBucket]]
  #         METADATA_TABLE_NAME:
  #           !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
  #         DATASETS_S3_BUCKET: # S3 implementation
  #           !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]
  #     Policies:
  #       - AWSLambdaVPCAccessExecutionRole
  #       - DynamoDBCrudPolicy:
  #           TableName:
  #             !Join ["-", [!Ref AWS::StackName, !Ref MetadataTableName]]
  #       - S3CrudPolicy: # S3 implementation
  #           BucketName:
  #             !Join ["-", [!Ref AWS::StackName, !Ref DatasetsS3Bucket]]

  PermissionsFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Timeout: 300
      CodeUri: src/lambda/access_permissions/
      VpcConfig:
        SecurityGroupIds:
          - !ImportValue pharos-database-VPCSG
        SubnetIds:
          - !ImportValue pharos-database-LambdaSubnet
      Layers:
        - !Ref Libraries
      Environment:
        Variables:
          HOST: !ImportValue pharos-database-RDSProxyEndpoint
          PORT: !ImportValue pharos-database-Port
          DATABASE: !Join ["-", [!Ref AWS::StackName, database]]
          # USERNAME: !Join ["-", [!Ref AWS::StackName, user]]
      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:GetRandomPassword
                - secretsmanager:CreateSecret
                - secretsmanager:TagResource
              Resource:
                - "*"

  InvokePermissions:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt PermissionsFunction.Arn

Outputs:
  PharosApi:
    Description: "API Endpoint"
    Value: !GetAtt ApiCloudFrontDistribution.DomainName
      # !Sub "https://${JSONApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  # PharosMappingApi:
  #   Description: "Pharos Maps Tileserver API Endpoint"
  #   Value: !Sub "https://${MappingApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
  UserPoolID:
    Description: "Cognito User Pool ID"
    Value: !Ref UserPool
  ClientID:
    Description: "Pharos Frontend Client ID"
    Value: !Ref UserPoolClient
